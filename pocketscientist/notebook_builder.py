"""
Notebook builder for creating Jupyter notebooks from agent outputs.
"""

import json
from datetime import datetime
from pathlib import Path
from typing import List, Dict, Any, Optional

import nbformat
from nbformat.v4 import new_notebook, new_code_cell, new_markdown_cell


class NotebookBuilder:
    """Builds Jupyter notebooks from agent-generated cells."""
    
    def __init__(self):
        self.notebook_version = 4
    
    def build_notebook(
        self,
        cells: List[Dict[str, Any]],
        output_path: Path,
        title: str = "PocketScientist Analysis",
        context: Optional[str] = None
    ) -> None:
        """
        Build a Jupyter notebook from a list of cells.
        
        Args:
            cells: List of cell dictionaries from agents
            output_path: Path where to save the notebook
            title: Title for the notebook
            context: User context to include in header
        """
        
        # Create new notebook
        notebook = new_notebook()
        
        # Add notebook metadata
        notebook.metadata = {
            "kernelspec": {
                "display_name": "Python 3",
                "language": "python",
                "name": "python3"
            },
            "language_info": {
                "codemirror_mode": {"name": "ipython", "version": 3},
                "file_extension": ".py",
                "mimetype": "text/x-python",
                "name": "python",
                "nbconvert_exporter": "python",
                "pygments_lexer": "ipython3",
                "version": "3.9.0"
            },
            "pocketscientist": {
                "created": datetime.now().isoformat(),
                "title": title,
                "context": context or "No context provided"
            }
        }
        
        # Add header cell
        header_content = self._create_header(title, context)
        header_cell = new_markdown_cell(source=header_content)
        notebook.cells.append(header_cell)
        
        # Process and add cells from agents
        for cell_data in cells:
            try:
                cell = self._convert_cell(cell_data)
                if cell:
                    notebook.cells.append(cell)
            except Exception as e:
                # Add error cell instead of failing completely
                error_cell = new_markdown_cell(
                    source=f"**Error processing cell:** {str(e)}\n\nOriginal cell data: {str(cell_data)[:200]}..."
                )
                notebook.cells.append(error_cell)
        
        # Add footer cell
        footer_cell = self._create_footer()
        notebook.cells.append(footer_cell)
        
        # Save notebook
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, 'w', encoding='utf-8') as f:
            nbformat.write(notebook, f)
    
    def _create_header(self, title: str, context: Optional[str]) -> str:
        """Create the notebook header."""
        
        header_parts = [
            f"# {title}",
            "",
            f"**Generated by:** PocketScientist v0.1.0",
            f"**Created:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "---",
            ""
        ]
        
        if context:
            header_parts.extend([
                "## User Context",
                "",
                f"*{context}*",
                "",
                "---",
                ""
            ])
        
        header_parts.extend([
            "## Analysis Overview",
            "",
            "This notebook contains a comprehensive data science analysis following the CRISP-DM methodology.",
            "The analysis progresses through multiple phases, with agents iteratively refining their approach",
            "based on findings and insights discovered during the process.",
            "",
            "**CRISP-DM Phases:**",
            "1. Business Understanding - Define objectives and requirements",
            "2. Data Understanding - Initial data exploration and quality assessment", 
            "3. Data Preparation - Data cleaning, transformation, feature engineering",
            "4. Modeling - Select and apply modeling techniques",
            "5. Evaluation - Evaluate model performance and validate results",
            "6. Deployment - Prepare final recommendations and insights",
            "",
            "---",
            ""
        ])
        
        return "\n".join(header_parts)
    
    def _convert_cell(self, cell_data: Dict[str, Any]) -> Optional[nbformat.NotebookNode]:
        """Convert agent cell data to nbformat cell."""
        
        cell_type = cell_data.get("cell_type", "markdown")
        source = cell_data.get("source", "")
        metadata = cell_data.get("metadata", {})
        
        # Handle source format - can be string or list of strings
        if isinstance(source, list):
            source = "\n".join(source)
        elif not isinstance(source, str):
            source = str(source)
        
        # Skip empty cells
        if not source.strip():
            return None
        
        if cell_type == "code":
            cell = new_code_cell(source=source)
            cell.metadata = metadata
            
            # Add outputs if provided
            outputs = cell_data.get("outputs", [])
            if outputs:
                cell.outputs = outputs
                
            # Add execution count if provided
            execution_count = cell_data.get("execution_count")
            if execution_count is not None:
                cell.execution_count = execution_count
        
        elif cell_type == "markdown":
            cell = new_markdown_cell(source=source)
            cell.metadata = metadata
        
        else:
            # Unknown cell type, convert to markdown with warning
            source = f"**Unknown cell type: {cell_type}**\n\n{source}"
            cell = new_markdown_cell(source=source)
        
        return cell
    
    def _create_footer(self) -> nbformat.NotebookNode:
        """Create the notebook footer."""
        
        footer_content = [
            "---",
            "",
            "## Analysis Complete",
            "",
            f"**Completed:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            "",
            "This analysis was generated automatically by PocketScientist, an AI agent orchestration system",
            "that follows CRISP-DM data science methodologies. The agents iteratively explore, prepare,",
            "model, and evaluate data to provide actionable insights.",
            "",
            "### Key Features:",
            "- **Iterative Process**: Agents can revisit and refine earlier phases based on new findings",
            "- **Living Document**: This notebook shows the complete analytical journey, including iterations", 
            "- **Comprehensive Coverage**: All CRISP-DM phases are addressed systematically",
            "- **Automated Insights**: AI agents generate code, analysis, and recommendations automatically",
            "",
            "### Next Steps:",
            "- Review the final recommendations in the Deployment section",
            "- Validate findings with domain experts",
            "- Implement recommended actions",
            "- Monitor results and iterate as needed",
            "",
            "*Generated by PocketScientist - Bringing AI-powered data science to everyone*"
        ]
        
        return new_markdown_cell(source="\n".join(footer_content))
    
    def execute_notebook(
        self,
        notebook_path: Path,
        timeout: int = 300,
        kernel_name: str = "python3"
    ) -> bool:
        """
        Execute the notebook cells (optional feature for future use).
        
        Args:
            notebook_path: Path to the notebook file
            timeout: Execution timeout in seconds  
            kernel_name: Kernel to use for execution
            
        Returns:
            True if execution succeeded, False otherwise
        """
        
        try:
            import nbconvert
            from nbconvert.preprocessors import ExecutePreprocessor
            
            # Load notebook
            with open(notebook_path, 'r', encoding='utf-8') as f:
                notebook = nbformat.read(f, as_version=4)
            
            # Configure executor
            executor = ExecutePreprocessor(timeout=timeout, kernel_name=kernel_name)
            
            # Execute notebook
            executor.preprocess(notebook, {'metadata': {'path': str(notebook_path.parent)}})
            
            # Save executed notebook
            with open(notebook_path, 'w', encoding='utf-8') as f:
                nbformat.write(notebook, f)
            
            return True
            
        except Exception as e:
            print(f"Notebook execution failed: {str(e)}")
            return False
    
    def add_execution_metadata(
        self,
        notebook_path: Path,
        execution_stats: Dict[str, Any]
    ) -> None:
        """Add execution statistics to notebook metadata."""
        
        try:
            with open(notebook_path, 'r', encoding='utf-8') as f:
                notebook = nbformat.read(f, as_version=4)
            
            if "pocketscientist" not in notebook.metadata:
                notebook.metadata["pocketscientist"] = {}
            
            notebook.metadata["pocketscientist"]["execution_stats"] = execution_stats
            
            with open(notebook_path, 'w', encoding='utf-8') as f:
                nbformat.write(notebook, f)
                
        except Exception as e:
            print(f"Failed to add execution metadata: {str(e)}")